<?php

require_once(dirname(__FILE__) . '/../../params/Configuration.php');
require_once(dirname(__FILE__) . '/../../User/Model.php');

// @TODO namespace

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-11 at 11:34:18.
 */
class ModelTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Model
     */
    protected $object;
    
    protected $paramList;
    
    protected $idList;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Model;

        // Populate database with test data, and save IDs generated.
        $this->paramList = [];
        $this->idList = [];
        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            $iStr = strval($i);
            $this->paramList[$i] = [
                'e' => 'email' . $iStr . '@test.dev',
                'fn' => 'first' . $iStr,
                'ln' => 'last' . $iStr,
                'p' => 'password' . $iStr,
            ];
            // Save the list of IDs for created users.
            $this->idList[$i] = $this->object->create($this->paramList[$i]);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        // Delete data from test database.
        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            $this->object->delete($this->idList[$i]);
        }
    }

    public function testCreate() {
        $this->assertEquals(1, 1);
    }

    public function testUpdate() {
        $this->assertEquals(1, 1);
    }

    /**
     * 
     */
    public function testRead() {
        // Read all entries written to database and compare with original parameters.
        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            // Read the data from the setup
            $result = $this->object->read($this->idList[ $i ]);
            // Check each column
            $this->assertEquals($this->paramList[$i]['e'], $result['email']);
            $this->assertEquals($this->paramList[$i]['fn'], $result['first_name']);
            $this->assertEquals($this->paramList[$i]['ln'], $result['last_name']);
            $this->assertEquals($this->idList[ $i ], $result['id_users']);
            // Verify the password hash.
            $this->assertTrue(password_verify($this->paramList[$i]['p'], $result['passwd']));
        }
    }

    public function testDelete() {
        $this->assertEquals(1, 1);
    }

    public function testGetErrors() {
        $this->assertEquals(1, 1);
    }

    public function testAddError() {
        $this->assertEquals(1, 1);
    }

}
