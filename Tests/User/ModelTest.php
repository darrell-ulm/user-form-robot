<?php
/**
 * Composer
 */
require_once dirname(__FILE__) . '/../../vendor/autoload.php';

use params\Configuration;
use User\Model;

// @TODO namespace

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-11 at 11:34:18.
 *
 * @TODO Some of these are unit tests and some integration / could do both.
 *
 * by: Darrell Ulm
 */
class ModelTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var \User\Model
     */
    protected $object;

    /**
     * @var \User\Model\array
     */
    protected $paramList;

    /**
     * @var \User\Model\array
     */
    protected $idList;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new Model();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
    }

    /**
     * Add data to database for integration testing.
     * Not a test, but calls create to make data for other tests.
     *
     * @param string $prefix                // Prefix of data to add
     * @return array
     */
    protected function addData($prefix = '')
    {
        // Populate database with test data, and save IDs generated.
        $paramList = [];
        $idList = [];
        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            $iStr = (string)$i;
            $paramList[$i] = [
                'e' => $prefix . 'email' . $iStr . '@' . $prefix . 'Test.dev',
                'fn' => $prefix . 'first' . $iStr,
                'ln' => $prefix . 'last' . $iStr,
                'p' => $prefix . 'password' . $iStr,
            ];
            // Save the list of IDs for created users.
            $idList[$i] = $this->object->create($paramList[$i]);
        }
        return ['params' => $paramList, 'ids' => $idList];
    }

    /**
     * Removes test data from database.
     * Not a test, but used to delete and remove test data.
     *
     * @param mixed $data
     */
    protected function removeData($data)
    {
        // Delete data from test database.
        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            $this->object->delete($data['ids'][$i]);
        }
    }

    /**
     * Validate data:
     * Not a unit test, but used for validation of integration
     * testing.
     *
     * @param array $data                   // Data and id arrays to validate
     * @param bool $testEmpty               // true if user at id should not be found
     * @return void
     */
    protected function validateData($data, $testEmpty = false)
    {
        // Read all entries written to database and compare with original parameters.
        $paramList = $data['params'];
        $idList = $data['ids'];

        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            // Read the data from the setup
            $result = $this->object->read($idList[$i]);
            
            \var_dump($result);
            \var_dump($paramList[$i]);

            // For delete, and testing if empty.
            if ($testEmpty) {
                $this->assertFalse($result);
            } else {
                // Check each column for other cases of validation
                $this->assertEquals($paramList[$i]['e'], $result['email']);
                $this->assertEquals($paramList[$i]['fn'], $result['first_name']);
                $this->assertEquals($paramList[$i]['ln'], $result['last_name']);
                $this->assertEquals($idList[$i], $result['id_users']);
                // Verify the password hash.
                $this->assertTrue(password_verify($paramList[$i]['p'], $result['passwd']));
            }
        }
    }

    /**
     * Model test create / uses add data which calls Model create.
     *
     * *** TEST LINE *** : Method addData calls *** create ***
     * $data = $this->addData('create');
     *
     * @return void
     */
    public function testCreate()
    {
        // *** TEST LINE *** : Method addData calls create.
        $data = $this->addData('create');
        // *** TEST LINE ***
        
        // Check what was added.
        $this->validateData($data);
        // Remove created data.
        $this->removeData($data);
    }

    /**
     * Model test update calls update directly modifying data.
     *
     * *** TEST LINE *** : Call update with the modified data.
     * $this->object->update($data['params'][$i]);
     *
     * @return void
     */
    public function testUpdate()
    {
        // Create test data.
        $data = $this->addData('update');

        // Modify the entry, not the email in this test.
        for ($i = 0; $i < Configuration::TEST_DATA_SIZE; $i++) {
            $data['params'][$i]['id'] = $data['ids'][$i];
            $data['params'][$i]['fn'] = $data['params'][$i]['fn'] . bin2hex(random_bytes(4));
            $data['params'][$i]['ln'] = $data['params'][$i]['ln'] . bin2hex(random_bytes(4));
            $data['params'][$i]['p'] = $data['params'][$i]['p'] . bin2hex(random_bytes(4));

            // *** TEST LINE *** : Call update directly with the modded data.
            $this->object->update($data['params'][$i]);
            // *** TEST LINE ***
        }

        // Test the data.
        $this->validateData($data);

        // Remove the test data.
        $this->removeData($data);
    }

    /**
     * Model test read.
     *
     * *** TEST LINE *** : validateData calls read
     * $this->validateData($data);
     *
     * @return void
     */
    public function testRead()
    {
        // Add data, read it, check results, remove.
        $data = $this->addData('read');
        
        // *** TEST LINE *** : validateData calls read.
        $this->validateData($data);
        // *** TEST LINE ***
        
        $this->removeData($data);

        // Make sure reading empty data works.
        // *** TEST LINE *** : validateData calls read
        $this->validateData($data, true);
        // *** TEST LINE ***
    }

    /**
     * Model test delete.
     * *** TEST LINE *** : Remove the data.
     * $this->removeData($data);
     *
     * @return void
     */
    public function testDelete()
    {
        // Add data.
        $data = $this->addData('delete');

        // *** TEST LINE *** : Remove the data calls delete.
        $this->removeData($data);
        // *** TEST LINE ***

        // Make sure data was removed. True parameter checks for not found.
        $this->validateData($data, true);
    }

    /**
     * Model test for getErrors
     *
     * *** TEST LINE *** : Try get errors with nothing added to error array.
     * $result = $this->object->getErrors();
     *
     * @return void
     */
    public function testGetErrors()
    {
        // *** TEST LINE *** : Try get errors with nothing added to error array.
        $result = $this->object->getErrors();
        // *** TEST LINE ***

        $expected = [];
        $delta = 0.0;
        $maxDepth = 10;
        $canonicalize = true;
        $this->assertEquals($expected, $result, '$canonicalize = true', $delta, $maxDepth, $canonicalize);

        // Add some errors, and then check if Get is working.s
        $this->object->addError('DBerr1');
        $this->object->addError('DBerr2');

        // *** TEST LINE ***
        $result = $this->object->getErrors();
        // *** TEST LINE ***

        $expected = [0 => 'DBerr1', 1 => 'DBerr2'];
        $this->assertEquals($expected, $result, '$canonicalize = true', $delta, $maxDepth, $canonicalize);
    }

    /**
     * Model test for addErrors
     *
     * @return void
     */
    public function testAddError()
    {
        // *** TEST LINE ***
        $this->object->addError('DBerr3');
        // *** TEST LINE ***

        // *** TEST LINE ***
        $this->object->addError('DBerr4');
        // *** TEST LINE ***

        $result = $this->object->getErrors();
        $expected = [0 => 'DBerr3', 1 => 'DBerr4'];
        $delta = 0.0;
        $maxDepth = 10;
        $canonicalize = true;
        $this->assertEquals($expected, $result, '$canonicalize = true', $delta, $maxDepth, $canonicalize);
    }
}
