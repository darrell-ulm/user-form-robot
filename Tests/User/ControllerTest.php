<?php

//require_once '../../User/Model.php';
//require_once '../../User/View.php';
require_once(dirname(__FILE__) . '/../../User/Model.php');
require_once(dirname(__FILE__) . '/../../User/View.php');
require_once(dirname(__FILE__) . '/../../User/Controller.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-11 at 11:34:17.
 */
class ControllerTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Controller
     */
    protected $object;
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Controller;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testAnalyseRoute() {
        $url = '/read/id/1';
        $results = $this->object->analyseRoute($url);
        $params = $this->object->getParams();
        $id = $this->object->getID();
        $query = $this->object->getQueryParams();
        $this->assertEquals($params, ['command' => 'read', 'query' => ['id' => '1']]);
        $this->assertEquals($id, 1);
        $this->assertEquals($query, ['id' => '1']);
        $this->assertInternalType('boolean', $results);
        $this->assertEquals(true, $results);
    }

    public function testDirectRoute() {
        $url = '/read/id/1';
        ob_start();
        $results = $this->object->directRoute($url);
        $text = ob_get_clean();
        $params = $this->object->getParams();
        $id = $this->object->getID();
        $query = $this->object->getQueryParams();
        $this->assertEquals($params, ['command' => 'read', 'query' => ['id' => '1']]);
        $this->assertEquals($id, 1);
        $this->assertEquals($query, ['id' => '1']);
        $this->assertInternalType('string', $text);
        $this->assertInternalType('boolean', $results);
        $this->assertEquals(false, $results);
    }

    public function testRouteError() {
        ob_start();
        $results = $this->object->routeError();
        $text = ob_get_clean();
        $this->assertInternalType('string', $text);
        $this->assertInternalType('boolean', $results);
        $this->assertEquals(false, $results);
    }

    /**
     * 
     */
    public function testDefaultPage() {
        ob_start();
        $results = $this->object->defaultPage();
        $text = ob_get_clean();
        $this->assertInternalType('string', $text);
        $this->assertInternalType('boolean', $results);
        $this->assertEquals(true, $results);
    }

    public function testUpdateUser() {
        $this->assertEquals(1, 1);
    }

    public function testCreateUser() {
        $this->assertEquals(1, 1);
    }

    public function testDeleteUser() {
        $this->assertEquals(1, 1);
    }

    /**
     * 
     */
    public function testReadUser() {
        $url = '/read/id/0';
        $results = $this->object->analyseRoute($url);
        ob_start();
        $results = $this->object->readUser();
        $text = ob_get_clean();
        $params = $this->object->getParams();
        $id = $this->object->getID();
        $query = $this->object->getQueryParams();
        $this->assertEquals($params, ['command' => 'read', 'query' => ['id' => '0']]);
        $this->assertEquals($id, 0);
        $this->assertEquals($query, ['id' => '0']);
        $this->assertInternalType('string', $text);
        $this->assertInternalType('boolean', $results);
        $this->assertEquals(false, $results);
        $this->assertTrue(strpos($text, 'Could not read user from database'));
    }

    /**
     * 
     */
    public function testIndexUser() {
        ob_start();
        $results = $this->object->indexUser();
        $text = ob_get_clean();
        $this->assertInternalType('array', $results);
        $this->assertInternalType('string', $text);
    }

    /**
     * 
     */
    public function testGetID() {
        $result = $this->object->getID();
        $expected = false;
        $this->assertEquals($expected, $result);
    }

    /**
     * 
     */
    public function testGetParams() {
        $result = $this->object->getParams();
        $expected = NULL;
        $this->assertEquals($expected, $result);
    }

    /**
     * 
     */
    public function testGetQueryParams() {
        $result = $this->object->getQueryParams();
        $expected = NULL;
        $this->assertEquals($expected, $result);
    }
    
    /**
     * 
     */
    public function testGetUser() {
        $result = $this->object->getUser();
        $this->assertInstanceOf(Model::class, $result);
    }

    /**
     * 
     */
    public function testGetErrors() {
        $this->object->getUser()->addError('err1');
        $this->object->getUser()->addError('err2');
        $result = $this->object->getErrors();
        $expected = [0 => 'err1', 1 => 'err2'];
        $this->assertEquals($expected, $result, "\$canonicalize = true", $delta = 0.0, $maxDepth = 10, $canonicalize = true);
    }

}
